{"version":3,"sources":["utils/API.js","components/Hero/index.js","components/Card/index.js","components/SearchHeadings/index.js","components/SearchBox/index.js","components/Wrapper/index.js","components/Footer/index.js","pages/EmployeeDirectory.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Hero","className","Card","props","results","map","src","picture","medium","alt","name","first","last","email","phone","location","country","CardHeader","class","scope","onClick","handleSort","id","SearchBox","htmlFor","value","search","onChange","handleInputChange","list","type","placeholder","Wrapper","Footer","Component","EmployeeDirectory","state","ascending","event","preventDefault","setState","target","toLowerCase","handleSortAZ","handleSortZA","handleSortLocation","sort","a","b","localeCompare","loadEmployees","API","then","res","data","catch","err","console","log","this","filter","includes","SearchHeadings","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.36eabc4f.chunk.js","sourcesContent":["import axios from \"axios\";\n// Export an object containing methods we'll use for accessing the API\n\nconst BASEURL = 'https://randomuser.me/api/?results=100';\n\nexport default {\n  // Gets all users\n  getEmployees: function() {\n\n    return axios.get(BASEURL);\n  }\n};","import React from \"react\";\nimport \"./style.css\";\n\nconst Hero = () => {\n  return (\n    <div className=\"jumbotron jumbotron-fluid header\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Employee Directory</h1>\n        <h4 className=\"lead\">Use searchbox to filter and sort by employee.</h4>\n      </div>\n    </div>\n  )\n}\n\nexport default Hero;","import React from \"react\";\n\nconst Card = (props) => {\n  return (\n    <tbody>\n      {props.results.map((results) => (\n        <tr>\n          <td><img src={results.picture.medium} alt=\"profilePicture\" /></td>\n          <td> {results.name.first}</td>\n          <td> {results.name.last}</td>\n          <td> {results.email}</td>\n          <td> {results.phone}</td>\n          <td>{results.location.country}</td>\n        </tr>\n      ))}\n    </tbody>\n  );\n}\n\nexport default Card;","import React from \"react\";\nimport Card from \"../Card\";\n\nconst CardHeader = (props) => {\n  return (\n    <div>\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Photo</th>\n            <th scope=\"col\">First Name<span onClick={props.handleSort}><i id=\"name\" className={props.class}></i></span></th>\n            <th scope=\"col\">Last Name<span onClick={props.handleSort}><i id=\"name\" className={props.class}></i></span></th>\n            <th scope=\"col\">Email<span onClick={props.handleSort}><i id=\"email\" className={props.class}></i></span></th>\n            <th scope=\"col\">Phone<span onClick={props.handleSort}><i id=\"phone\" className={props.class}></i></span></th>\n            <th scope=\"col\">Office Location<span onClick={props.handleSort}><i id=\"location\" className={props.class}></i></span></th>\n          </tr>\n        </thead>\n        <Card results={props.results}></Card>\n      </table>\n    </div>\n  );\n}\n\nexport default CardHeader;","import React from \"react\";\n\nconst SearchBox = (props) => {\n  return (\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"name\">Search Employee:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"search\"\n          list=\"names\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Name\"\n          id=\"name\"\n        />\n        {/* Sort button in searchbox */}\n        <button\n          type=\"submit\"\n          onClick={props.handleSort}\n          className=\"btn btn-dark\"\n        >\n          Sort A-Z\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchBox;","import React from \"react\";\nimport \"./style.css\";\n\nconst Wrapper = (props) => {\n  return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\n\nexport default class Footer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<footer>\n\t\t\t\t<section class=\"Footer-Bottom\">&copy; 2020 Carmen Obied</section>\n\t\t\t</footer>\n\t\t);\n\t}\n}","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport Hero from \"../components/Hero\";\nimport SearchHeadings from \"../components/SearchHeadings\";\nimport SearchBox from \"../components/SearchBox\";\nimport Wrapper from \"../components/Wrapper\";\nimport Footer from \"../components/Footer/index\";\n\nclass EmployeeDirectory extends Component {\n  state = {\n    results: [],\n    search: \"\",\n    ascending: \"\",\n    location: \"\",\n  };\n\n  // When the component mounts, load available employees to be displayed\n  componentDidMount() {\n    this.loadEmployees();\n  }\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n    this.setState({ search: event.target.value.toLowerCase() });\n  };\n\n  // sort in ascending or descending order\n  handleSort = (event) => {\n    event.preventDefault();\n    const { ascending } = this.state;\n    if (ascending === false || ascending === \"\") {\n      // A to Z\n      this.handleSortAZ();\n    } else if (ascending === true) {\n      // Z to A\n      this.handleSortZA();\n    } else if (ascending === true) {\n      // location\n      this.handleSortLocation();\n    }\n    return;\n  };\n\n  // sort A to Z\n  handleSortAZ = () => {\n    this.setState({\n      results: this.state.results.sort((a, b) =>\n        a.name.first.localeCompare(b.name.first)\n      ),\n      ascending: true,\n    });\n  };\n\n  // sort Z to A\n  handleSortZA = () => {\n    this.setState({\n      results: this.state.results.sort((a, b) =>\n        b.name.first.localeCompare(a.name.first)\n      ),\n      ascending: false,\n    });\n  };\n\n  // load employee list\n  loadEmployees = () => {\n    API.getEmployees()\n      .then((res) =>\n        this.setState({\n          results: res.data.results,\n        })\n      )\n      .catch((err) => console.log(err));\n  };\n\n  render() {\n    const filter = this.state.results.filter((results) =>\n      results.name.first.toLowerCase().includes(this.state.search)\n    );\n\n    return (\n      <Wrapper>\n\n        <div>\n          <h1 className=\"text-center\"><Hero /></h1>\n          \n          <SearchBox\n            handleSort={this.handleSort}\n            handleInputChange={this.handleInputChange}\n          ></SearchBox>\n\n          <SearchHeadings results={filter}></SearchHeadings>\n          <Footer />\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default EmployeeDirectory;","import React from \"react\";\nimport EmployeeDirectory from \"./pages/EmployeeDirectory\";\nimport \"./App.css\"\n\nconst App = () => {\n  return (\n  <EmployeeDirectory />\n  )\n};\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}